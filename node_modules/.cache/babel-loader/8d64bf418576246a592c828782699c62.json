{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\nimport { firestore } from '../../shared/firebase';\nimport firebase from 'firebase/compat/app';\nimport { getDocs, addDoc, collection, query, where, orderBy, updateDoc, increment } from 'firebase/firestore';\nimport { db } from '../../shared/firebase';\nimport { actionCreators as postActions } from './post';\nimport { update } from 'lodash';\nimport moment from 'moment';\nconst SET_COMMENT = 'SET_COMMENT';\nconst ADD_COMMENT = 'ADD_COMMENT';\nconst LOADING = 'LOADING';\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list\n}));\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: {},\n  is_loading: false\n};\n\nconst addCommentFB = (post_id, contents) => {\n  return async function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    // const commentDB = collection(db, 'comment')\n    const user_info = getState().user.user;\n    const post = getState().post.list.find(l => l.id === post_id);\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format('YYYY-MM-DD hh:mm')\n    };\n    await addDoc(collection(db, 'comment'), {\n      comment\n    }).then(async i => {\n      const post = getState().post.list.find(l => l.id === post_id);\n      comment = { ...comment,\n        id: i.id\n      }; //   const increment = firebase.firestore.FieldValue.increment(1){ comment_cnt: increment }\n      //   comment = { ...comment, id: doc.id }\n\n      await updateDoc(doc(db, 'post', post_id), {\n        comment_cnt: increment(1)\n      }).then(async _post => {\n        dispatch(addComment(post_id, comment));\n\n        if (post) {\n          dispatch(postActions.editPost(post_id, {\n            comment_cnt: parseInt(post.comment_cnt) + 1\n          }));\n        }\n      });\n    });\n  };\n};\n\nconst getCommentFB = post_id => {\n  return async function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n\n    if (!post_id) {\n      return;\n    }\n\n    const commentDB = collection(db, 'comment');\n    console.log(commentDB);\n    const q = query(commentDB, where('post_id', '==', post_id), orderBy('insert_dt', 'desc'));\n    await getDocs(q).then(docs => {\n      let list = [];\n      docs.forEach(doc => {\n        console.log(doc.data());\n        list.push({ ...doc.data(),\n          id: doc.id\n        });\n      });\n      dispatch(setComment(post_id, list));\n    }).catch(err => {\n      console.log('댓글 정보를 가져올 수가 ....', err);\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_COMMENT]: (state, action) => produce(state, draft => {\n    //let date ={[post_id]: com_list...}\n    draft.list[action.payload.post_id] = action.payload.comment_list;\n  }),\n  [ADD_COMMENT]: (state, action) => produce(state, draft => {\n    draft.list[action.payload.post_id].unshift(action.payload.comment);\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment,\n  addCommentFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/redux/modules/comments.js"],"names":["createAction","handleActions","produce","firestore","firebase","getDocs","addDoc","collection","query","where","orderBy","updateDoc","increment","db","actionCreators","postActions","update","moment","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","addCommentFB","contents","dispatch","getState","history","user_info","user","post","find","l","id","user_id","uid","user_name","user_profile","insert_dt","format","then","i","doc","comment_cnt","_post","editPost","parseInt","getCommentFB","commentDB","console","log","q","docs","forEach","data","push","catch","err","state","action","draft","payload","unshift"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions'\nimport { produce } from 'immer'\nimport { firestore } from '../../shared/firebase'\nimport firebase from 'firebase/compat/app'\nimport {\n  getDocs,\n  addDoc,\n  collection,\n  query,\n  where,\n  orderBy,\n  updateDoc,\n  increment,\n} from 'firebase/firestore'\nimport { db } from '../../shared/firebase'\nimport { actionCreators as postActions } from './post'\nimport { update } from 'lodash'\nimport moment from 'moment'\n\nconst SET_COMMENT = 'SET_COMMENT'\nconst ADD_COMMENT = 'ADD_COMMENT'\n\nconst LOADING = 'LOADING'\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list,\n}))\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment,\n}))\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }))\n\nconst initialState = {\n  list: {},\n  is_loading: false,\n}\n\nconst addCommentFB = (post_id, contents) => {\n  return async function (dispatch, getState, { history }) {\n    // const commentDB = collection(db, 'comment')\n    const user_info = getState().user.user\n    const post = getState().post.list.find((l) => l.id === post_id)\n\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format('YYYY-MM-DD hh:mm'),\n    }\n\n    await addDoc(collection(db, 'comment'), { comment }).then(async (i) => {\n      const post = getState().post.list.find((l) => l.id === post_id)\n      comment = { ...comment, id: i.id }\n      //   const increment = firebase.firestore.FieldValue.increment(1){ comment_cnt: increment }\n      //   comment = { ...comment, id: doc.id }\n\n      await updateDoc(doc(db, 'post', post_id), {\n        comment_cnt: increment(1),\n      }).then(async (_post) => {\n        dispatch(addComment(post_id, comment))\n\n        if (post) {\n          dispatch(\n            postActions.editPost(post_id, {\n              comment_cnt: parseInt(post.comment_cnt) + 1,\n            }),\n          )\n        }\n      })\n    })\n  }\n}\n\nconst getCommentFB = (post_id) => {\n  return async function (dispatch, getState, { history }) {\n    if (!post_id) {\n      return\n    }\n    const commentDB = collection(db, 'comment')\n    console.log(commentDB)\n    const q = query(\n      commentDB,\n      where('post_id', '==', post_id),\n      orderBy('insert_dt', 'desc'),\n    )\n    await getDocs(q)\n      .then((docs) => {\n        let list = []\n        docs.forEach((doc) => {\n          console.log(doc.data())\n          list.push({ ...doc.data(), id: doc.id })\n        })\n        dispatch(setComment(post_id, list))\n      })\n\n      .catch((err) => {\n        console.log('댓글 정보를 가져올 수가 ....', err)\n      })\n  }\n}\n\nexport default handleActions(\n  {\n    [SET_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        //let date ={[post_id]: com_list...}\n        draft.list[action.payload.post_id] = action.payload.comment_list\n      }),\n    [ADD_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list[action.payload.post_id].unshift(action.payload.comment)\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading\n      }),\n  },\n  initialState,\n)\n\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment,\n  addCommentFB,\n}\n\nexport { actionCreators }\n"]},"metadata":{},"sourceType":"module"}