{"ast":null,"code":"import _objectSpread from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React from'react';import{Grid,Text,Image}from'../elements';import Card from'../components/Card';import{realtime}from'../shared/firebase';import{useSelector}from'react-redux';import{ref,get,update}from'firebase/database';import{jsx as _jsx}from\"react/jsx-runtime\";var Notification=function Notification(props){var user=useSelector(function(state){return state.user.user;});var _React$useState=React.useState([]),_React$useState2=_slicedToArray(_React$useState,2),noti=_React$useState2[0],setNoti=_React$useState2[1];React.useEffect(function(){if(!user){return;}var notiDB=ref(realtime,\"noti/\".concat(user.uid,\"/list\"));get(notiDB).then(function(snapshot){if(snapshot.exists()){var _data=snapshot.val();var _noti_list=Object.keys(_data).reverse().map(function(n){return _data[n];});setNoti(_noti_list);}},[user]);return function(){var notiDB=ref(realtime,\"noti/\".concat(user.user_id));update(notiDB,{list:[]});};},[user]);return/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(Grid,{padding:\"16px\",bg:\"#EFF6FF\",children:noti.map(function(n,idx){return/*#__PURE__*/_jsx(Card,_objectSpread({},n),\"noti_\".concat(idx));})})});};export default Notification;","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/pages/Notification.js"],"names":["React","Grid","Text","Image","Card","realtime","useSelector","ref","get","update","Notification","props","user","state","useState","noti","setNoti","useEffect","notiDB","uid","then","snapshot","exists","_data","val","_noti_list","Object","keys","reverse","map","n","user_id","list","idx"],"mappings":"uVAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,IAAT,CAAeC,IAAf,CAAqBC,KAArB,KAAkC,aAAlC,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CACA,OAASC,QAAT,KAAyB,oBAAzB,CACA,OAASC,WAAT,KAA4B,aAA5B,CACA,OAASC,GAAT,CAAcC,GAAd,CAAmBC,MAAnB,KAAiC,mBAAjC,C,2CAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAAW,CAC9B,GAAMC,CAAAA,IAAI,CAAGN,WAAW,CAAC,SAACO,KAAD,QAAWA,CAAAA,KAAK,CAACD,IAAN,CAAWA,IAAtB,EAAD,CAAxB,CACA,oBAAwBZ,KAAK,CAACc,QAAN,CAAe,EAAf,CAAxB,oDAAOC,IAAP,qBAAaC,OAAb,qBAEAhB,KAAK,CAACiB,SAAN,CAAgB,UAAM,CACpB,GAAI,CAACL,IAAL,CAAW,CACT,OACD,CACD,GAAMM,CAAAA,MAAM,CAAGX,GAAG,CAACF,QAAD,gBAAmBO,IAAI,CAACO,GAAxB,UAAlB,CAEAX,GAAG,CAACU,MAAD,CAAH,CAAYE,IAAZ,CACE,SAACC,QAAD,CAAc,CACZ,GAAIA,QAAQ,CAACC,MAAT,EAAJ,CAAuB,CACrB,GAAIC,CAAAA,KAAK,CAAGF,QAAQ,CAACG,GAAT,EAAZ,CACA,GAAIC,CAAAA,UAAU,CAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EACdK,OADc,GAEdC,GAFc,CAEV,SAACC,CAAD,CAAO,CACV,MAAOP,CAAAA,KAAK,CAACO,CAAD,CAAZ,CACD,CAJc,CAAjB,CAKAd,OAAO,CAACS,UAAD,CAAP,CACD,CACF,CAXH,CAYE,CAACb,IAAD,CAZF,EAeA,MAAO,WAAM,CACX,GAAMM,CAAAA,MAAM,CAAGX,GAAG,CAACF,QAAD,gBAAmBO,IAAI,CAACmB,OAAxB,EAAlB,CACAtB,MAAM,CAACS,MAAD,CAAS,CAAEc,IAAI,CAAE,EAAR,CAAT,CAAN,CACD,CAHD,CAID,CAzBD,CAyBG,CAACpB,IAAD,CAzBH,EA2BA,mBACE,KAAC,KAAD,CAAO,QAAP,wBACE,KAAC,IAAD,EAAM,OAAO,CAAC,MAAd,CAAqB,EAAE,CAAC,SAAxB,UACGG,IAAI,CAACc,GAAL,CAAS,SAACC,CAAD,CAAIG,GAAJ,CAAY,CACpB,mBAAO,KAAC,IAAD,kBAA8BH,CAA9B,iBAAmBG,GAAnB,EAAP,CACD,CAFA,CADH,EADF,EADF,CASD,CAxCD,CA0CA,cAAevB,CAAAA,YAAf","sourcesContent":["import React from 'react'\nimport { Grid, Text, Image } from '../elements'\nimport Card from '../components/Card'\nimport { realtime } from '../shared/firebase'\nimport { useSelector } from 'react-redux'\nimport { ref, get, update } from 'firebase/database'\n\nconst Notification = (props) => {\n  const user = useSelector((state) => state.user.user)\n  const [noti, setNoti] = React.useState([])\n\n  React.useEffect(() => {\n    if (!user) {\n      return\n    }\n    const notiDB = ref(realtime, `noti/${user.uid}/list`)\n\n    get(notiDB).then(\n      (snapshot) => {\n        if (snapshot.exists()) {\n          let _data = snapshot.val()\n          let _noti_list = Object.keys(_data)\n            .reverse()\n            .map((n) => {\n              return _data[n]\n            })\n          setNoti(_noti_list)\n        }\n      },\n      [user],\n    )\n\n    return () => {\n      const notiDB = ref(realtime, `noti/${user.user_id}`)\n      update(notiDB, { list: [] })\n    }\n  }, [user])\n\n  return (\n    <React.Fragment>\n      <Grid padding=\"16px\" bg=\"#EFF6FF\">\n        {noti.map((n, idx) => {\n          return <Card key={`noti_${idx}`} {...n} />\n        })}\n      </Grid>\n    </React.Fragment>\n  )\n}\n\nexport default Notification\n"]},"metadata":{},"sourceType":"module"}