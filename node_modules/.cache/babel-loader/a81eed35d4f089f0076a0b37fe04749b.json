{"ast":null,"code":"var _jsxFileName = \"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/src/components/CommentList.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Grid, Image, Text } from '../elements';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { actionCreators as commentActions } from '../redux/modules/comments';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CommentList = props => {\n  _s();\n\n  const dispatch = useDispatch();\n  const comment_list = useSelector(state => state.comment.list);\n  console.log(comment_list);\n  const {\n    post_id\n  } = props;\n  React.useEffect(() => {\n    if (!comment_list[post_id]) {\n      // 코멘트 정보가 없으면 불러오기\n      dispatch(commentActions.getCommentFB(post_id));\n    }\n  }, []); //post_id를 props로 받아오고 그 post_id도 database에서 가져오므로\n  //post_id가 없는 순간이 생기면서 comment_list[post_id]에 아무 것도 없게 된다\n  //또는 달린 댓글이 없을때도 map함수를 돌리면 오류가 나므로 이 조건 추가해야함!\n  // comment가 없거나, post_id가 없으면 아무것도 안넘겨준다!\n\n  if (!comment_list[post_id] || !post_id) {\n    return null;\n  }\n\n  console.log(comment_list);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      padding: \"16px\",\n      children: comment_list[post_id].map(comment => {\n        return /*#__PURE__*/_jsxDEV(CommentItem, { ...comment\n        }, comment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 18\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CommentList, \"5RsKkgUDEVZ5gflQywIMZfCltyI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CommentList;\n\nconst CommentItem = props => {\n  const {\n    user_profile,\n    user_name,\n    contents,\n    insert_dt\n  } = props;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    is_flex: true,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      is_flex: true,\n      width: \"auto\",\n      children: [/*#__PURE__*/_jsxDEV(Image, {\n        shape: \"circle\",\n        src: user_profile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        bold: true,\n        children: user_name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      is_flex: true,\n      margin: \"0px 4px\",\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        margin: \"0px\",\n        children: contents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Text, {\n        margin: \"0px\",\n        children: insert_dt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n};\n\n_c2 = CommentItem;\nCommentList.defaultProps = {\n  post_id: null\n};\nCommentItem.defaultProps = {\n  user_profile: '',\n  user_name: 'mean0',\n  user_id: '',\n  post_id: 1,\n  contents: '귀여운 고양이네요!',\n  insert_dt: '2021-01-01 19:00:00'\n};\nexport default CommentList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"CommentList\");\n$RefreshReg$(_c2, \"CommentItem\");","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/components/CommentList.js"],"names":["React","Grid","Image","Text","useDispatch","useSelector","actionCreators","commentActions","CommentList","props","dispatch","comment_list","state","comment","list","console","log","post_id","useEffect","getCommentFB","map","id","CommentItem","user_profile","user_name","contents","insert_dt","defaultProps","user_id"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Grid, Image, Text } from '../elements'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport { actionCreators as commentActions } from '../redux/modules/comments'\n\nconst CommentList = (props) => {\n  const dispatch = useDispatch()\n  const comment_list = useSelector((state) => state.comment.list)\n  console.log(comment_list)\n\n  const { post_id } = props\n\n  React.useEffect(() => {\n    if (!comment_list[post_id]) {\n      // 코멘트 정보가 없으면 불러오기\n      dispatch(commentActions.getCommentFB(post_id))\n    }\n  }, [])\n\n  //post_id를 props로 받아오고 그 post_id도 database에서 가져오므로\n  //post_id가 없는 순간이 생기면서 comment_list[post_id]에 아무 것도 없게 된다\n  //또는 달린 댓글이 없을때도 map함수를 돌리면 오류가 나므로 이 조건 추가해야함!\n  // comment가 없거나, post_id가 없으면 아무것도 안넘겨준다!\n  if (!comment_list[post_id] || !post_id) {\n    return null\n  }\n  console.log(comment_list)\n\n  return (\n    <React.Fragment>\n      <Grid padding=\"16px\">\n        {comment_list[post_id].map((comment) => {\n          return <CommentItem key={comment.id} {...comment} />\n        })}\n      </Grid>\n    </React.Fragment>\n  )\n}\n\nconst CommentItem = (props) => {\n  const { user_profile, user_name, contents, insert_dt } = props\n  return (\n    <Grid is_flex>\n      <Grid is_flex width=\"auto\">\n        <Image shape=\"circle\" src={user_profile} />\n        <Text bold>{user_name}</Text>\n      </Grid>\n      <Grid is_flex margin=\"0px 4px\">\n        <Text margin=\"0px\">{contents}</Text>\n        <Text margin=\"0px\">{insert_dt}</Text>\n      </Grid>\n    </Grid>\n  )\n}\n\nCommentList.defaultProps = {\n  post_id: null,\n}\n\nCommentItem.defaultProps = {\n  user_profile: '',\n  user_name: 'mean0',\n  user_id: '',\n  post_id: 1,\n  contents: '귀여운 고양이네요!',\n  insert_dt: '2021-01-01 19:00:00',\n}\n\nexport default CommentList\n"]},"metadata":{},"sourceType":"module"}