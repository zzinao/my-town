{"ast":null,"code":"import _objectSpread from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/regenerator/index.js\";import React,{useEffect}from'react';import Post from'../components/Post';import{Button}from'../elements/index';import CommentList from'../components/CommentList';import CommentWrite from'../components/CommentWrite';import{useSelector,useDispatch}from'react-redux';import{actionCreators as postActions}from'../redux/modules/post';import Permit from'../shared/Permit';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var PostDetail=function PostDetail(props){var _post$user_info;var dispatch=useDispatch();var id=props.match.params.id;console.log(id);var user_info=useSelector(function(state){return state.user.user;});var post_list=useSelector(function(store){return store.post.list;});var post_idx=post_list.findIndex(function(p){return p.id===id;});var post=post_list[post_idx];React.useEffect(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!post){_context.next=2;break;}return _context.abrupt(\"return\");case 2:dispatch(postActions.getOnePostFB(id));case 3:case\"end\":return _context.stop();}}},_callee);})),[]);var deletePost=function deletePost(){window.alert('삭제가 완료되었습니다!');};return/*#__PURE__*/_jsxs(React.Fragment,{children:[post&&/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Post,_objectSpread(_objectSpread({},post),{},{is_me:((_post$user_info=post.user_info)===null||_post$user_info===void 0?void 0:_post$user_info.user_id)===(user_info===null||user_info===void 0?void 0:user_info.uid)})),post.user_info.user_id===(user_info===null||user_info===void 0?void 0:user_info.uid)?'':null]}),/*#__PURE__*/_jsx(Permit,{children:/*#__PURE__*/_jsx(CommentWrite,{post_id:id})}),/*#__PURE__*/_jsx(CommentList,{post_id:id})]});};export default PostDetail;","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/pages/PostDetail.js"],"names":["React","useEffect","Post","Button","CommentList","CommentWrite","useSelector","useDispatch","actionCreators","postActions","Permit","PostDetail","props","dispatch","id","match","params","console","log","user_info","state","user","post_list","store","post","list","post_idx","findIndex","p","getOnePostFB","deletePost","window","alert","user_id","uid"],"mappings":"sgBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CACA,OAASC,MAAT,KAAuB,mBAAvB,CACA,MAAOC,CAAAA,WAAP,KAAwB,2BAAxB,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,cAAc,GAAIC,CAAAA,WAA3B,KAA8C,uBAA9C,CACA,MAAOC,CAAAA,MAAP,KAAmB,kBAAnB,C,6IAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAAW,qBAC5B,GAAMC,CAAAA,QAAQ,CAAGN,WAAW,EAA5B,CACA,GAAMO,CAAAA,EAAE,CAAGF,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B,CACAG,OAAO,CAACC,GAAR,CAAYJ,EAAZ,EACA,GAAMK,CAAAA,SAAS,CAAGb,WAAW,CAAC,SAACc,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAN,CAAWA,IAAtB,EAAD,CAA7B,CACA,GAAMC,CAAAA,SAAS,CAAGhB,WAAW,CAAC,SAACiB,KAAD,QAAWA,CAAAA,KAAK,CAACC,IAAN,CAAWC,IAAtB,EAAD,CAA7B,CACA,GAAMC,CAAAA,QAAQ,CAAGJ,SAAS,CAACK,SAAV,CAAoB,SAACC,CAAD,QAAOA,CAAAA,CAAC,CAACd,EAAF,GAASA,EAAhB,EAApB,CAAjB,CACA,GAAMU,CAAAA,IAAI,CAAGF,SAAS,CAACI,QAAD,CAAtB,CAEA1B,KAAK,CAACC,SAAN,sEAAgB,uIAKVuB,IALU,iEAQdX,QAAQ,CAACJ,WAAW,CAACoB,YAAZ,CAAyBf,EAAzB,CAAD,CAAR,CARc,sDAAhB,GASG,EATH,EAWA,GAAMgB,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,EAAM,CACvBC,MAAM,CAACC,KAAP,CAAa,cAAb,EACD,CAFD,CAIA,mBACE,MAAC,KAAD,CAAO,QAAP,YACGR,IAAI,eACH,wCACE,KAAC,IAAD,gCAAUA,IAAV,MAAgB,KAAK,CAAE,kBAAAA,IAAI,CAACL,SAAL,0DAAgBc,OAAhB,KAA4Bd,SAA5B,SAA4BA,SAA5B,iBAA4BA,SAAS,CAAEe,GAAvC,CAAvB,GADF,CAEGV,IAAI,CAACL,SAAL,CAAec,OAAf,IAA2Bd,SAA3B,SAA2BA,SAA3B,iBAA2BA,SAAS,CAAEe,GAAtC,EAA4C,EAA5C,CAAiD,IAFpD,GAFJ,cAOE,KAAC,MAAD,wBACE,KAAC,YAAD,EAAc,OAAO,CAAEpB,EAAvB,EADF,EAPF,cAWE,KAAC,WAAD,EAAa,OAAO,CAAEA,EAAtB,EAXF,GADF,CAeD,CAvCD,CAyCA,cAAeH,CAAAA,UAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport Post from '../components/Post'\nimport { Button } from '../elements/index'\nimport CommentList from '../components/CommentList'\nimport CommentWrite from '../components/CommentWrite'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { actionCreators as postActions } from '../redux/modules/post'\nimport Permit from '../shared/Permit'\n\nconst PostDetail = (props) => {\n  const dispatch = useDispatch()\n  const id = props.match.params.id\n  console.log(id)\n  const user_info = useSelector((state) => state.user.user)\n  const post_list = useSelector((store) => store.post.list)\n  const post_idx = post_list.findIndex((p) => p.id === id)\n  const post = post_list[post_idx]\n\n  React.useEffect(async () => {\n    //여기서도 마찬가지로 새로고침하면 reducer store는 리셋된다!\n    //따라서 post가 있을 때(맨처음 detail 페이지로 왔을 때 )는 더 작업을 안해도 되고\n    //디테일 페이지에서 새로고침을 했을 때마다 post_id에 해당하는 data하나만\n    //firestore에서 load해온다!\n    if (post) {\n      return\n    }\n    dispatch(postActions.getOnePostFB(id))\n  }, [])\n\n  const deletePost = () => {\n    window.alert('삭제가 완료되었습니다!')\n  }\n\n  return (\n    <React.Fragment>\n      {post && (\n        <>\n          <Post {...post} is_me={post.user_info?.user_id === user_info?.uid} />\n          {post.user_info.user_id === user_info?.uid ? '' : null}\n        </>\n      )}\n      <Permit>\n        <CommentWrite post_id={id} />\n      </Permit>\n\n      <CommentList post_id={id} />\n    </React.Fragment>\n  )\n}\n\nexport default PostDetail\n"]},"metadata":{},"sourceType":"module"}