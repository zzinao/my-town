{"ast":null,"code":"var _jsxFileName = \"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/src/pages/PostDetail.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Post from '../components/Post';\nimport { Button } from '../elements/index';\nimport CommentList from '../components/CommentList';\nimport CommentWrite from '../components/CommentWrite';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { actionCreators as postActions } from '../redux/modules/post';\nimport Permit from '../shared/Permit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst PostDetail = props => {\n  _s();\n\n  var _post$user_info;\n\n  const dispatch = useDispatch();\n  const id = props.match.params.id;\n  console.log(id);\n  const user_info = useSelector(state => state.user.user);\n  const post_list = useSelector(store => store.post.list);\n  const post_idx = post_list.findIndex(p => p.id === id);\n  const post = post_list[post_idx];\n  React.useEffect(async () => {\n    //여기서도 마찬가지로 새로고침하면 reducer store는 리셋된다!\n    //따라서 post가 있을 때(맨처음 detail 페이지로 왔을 때 )는 더 작업을 안해도 되고\n    //디테일 페이지에서 새로고침을 했을 때마다 post_id에 해당하는 data하나만\n    //firestore에서 load해온다!\n    if (post) {\n      return;\n    }\n\n    dispatch(postActions.getOnePostFB(id));\n  }, []);\n\n  const deletePost = () => {\n    window.alert('삭제가 완료되었습니다!');\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [post && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Post, { ...post,\n        is_me: ((_post$user_info = post.user_info) === null || _post$user_info === void 0 ? void 0 : _post$user_info.user_id) === (user_info === null || user_info === void 0 ? void 0 : user_info.uid)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), post.user_info.user_id === (user_info === null || user_info === void 0 ? void 0 : user_info.uid) ? '' : null]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(Permit, {\n      children: /*#__PURE__*/_jsxDEV(CommentWrite, {\n        post_id: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CommentList, {\n      post_id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PostDetail, \"lB3dOQtTn+q0oQRlxg50JtbqMVk=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = PostDetail;\nexport default PostDetail;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostDetail\");","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/pages/PostDetail.js"],"names":["React","useEffect","Post","Button","CommentList","CommentWrite","useSelector","useDispatch","actionCreators","postActions","Permit","PostDetail","props","dispatch","id","match","params","console","log","user_info","state","user","post_list","store","post","list","post_idx","findIndex","p","getOnePostFB","deletePost","window","alert","user_id","uid"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,YAAP,MAAyB,4BAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,cAAc,IAAIC,WAA3B,QAA8C,uBAA9C;AACA,OAAOC,MAAP,MAAmB,kBAAnB;;;;AAEA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAAA;;AAAA;;AAC5B,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACA,QAAMO,EAAE,GAAGF,KAAK,CAACG,KAAN,CAAYC,MAAZ,CAAmBF,EAA9B;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYJ,EAAZ;AACA,QAAMK,SAAS,GAAGb,WAAW,CAAEc,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWA,IAAvB,CAA7B;AACA,QAAMC,SAAS,GAAGhB,WAAW,CAAEiB,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,IAAvB,CAA7B;AACA,QAAMC,QAAQ,GAAGJ,SAAS,CAACK,SAAV,CAAqBC,CAAD,IAAOA,CAAC,CAACd,EAAF,KAASA,EAApC,CAAjB;AACA,QAAMU,IAAI,GAAGF,SAAS,CAACI,QAAD,CAAtB;AAEA1B,EAAAA,KAAK,CAACC,SAAN,CAAgB,YAAY;AAC1B;AACA;AACA;AACA;AACA,QAAIuB,IAAJ,EAAU;AACR;AACD;;AACDX,IAAAA,QAAQ,CAACJ,WAAW,CAACoB,YAAZ,CAAyBf,EAAzB,CAAD,CAAR;AACD,GATD,EASG,EATH;;AAWA,QAAMgB,UAAU,GAAG,MAAM;AACvBC,IAAAA,MAAM,CAACC,KAAP,CAAa,cAAb;AACD,GAFD;;AAIA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,eACGR,IAAI,iBACH;AAAA,8BACE,QAAC,IAAD,OAAUA,IAAV;AAAgB,QAAA,KAAK,EAAE,oBAAAA,IAAI,CAACL,SAAL,oEAAgBc,OAAhB,OAA4Bd,SAA5B,aAA4BA,SAA5B,uBAA4BA,SAAS,CAAEe,GAAvC;AAAvB;AAAA;AAAA;AAAA;AAAA,cADF,EAEGV,IAAI,CAACL,SAAL,CAAec,OAAf,MAA2Bd,SAA3B,aAA2BA,SAA3B,uBAA2BA,SAAS,CAAEe,GAAtC,IAA4C,EAA5C,GAAiD,IAFpD;AAAA,oBAFJ,eAOE,QAAC,MAAD;AAAA,6BACE,QAAC,YAAD;AAAc,QAAA,OAAO,EAAEpB;AAAvB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAPF,eAWE,QAAC,WAAD;AAAa,MAAA,OAAO,EAAEA;AAAtB;AAAA;AAAA;AAAA;AAAA,YAXF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,CAvCD;;GAAMH,U;UACaJ,W,EAGCD,W,EACAA,W;;;KALdK,U;AAyCN,eAAeA,UAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport Post from '../components/Post'\nimport { Button } from '../elements/index'\nimport CommentList from '../components/CommentList'\nimport CommentWrite from '../components/CommentWrite'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { actionCreators as postActions } from '../redux/modules/post'\nimport Permit from '../shared/Permit'\n\nconst PostDetail = (props) => {\n  const dispatch = useDispatch()\n  const id = props.match.params.id\n  console.log(id)\n  const user_info = useSelector((state) => state.user.user)\n  const post_list = useSelector((store) => store.post.list)\n  const post_idx = post_list.findIndex((p) => p.id === id)\n  const post = post_list[post_idx]\n\n  React.useEffect(async () => {\n    //여기서도 마찬가지로 새로고침하면 reducer store는 리셋된다!\n    //따라서 post가 있을 때(맨처음 detail 페이지로 왔을 때 )는 더 작업을 안해도 되고\n    //디테일 페이지에서 새로고침을 했을 때마다 post_id에 해당하는 data하나만\n    //firestore에서 load해온다!\n    if (post) {\n      return\n    }\n    dispatch(postActions.getOnePostFB(id))\n  }, [])\n\n  const deletePost = () => {\n    window.alert('삭제가 완료되었습니다!')\n  }\n\n  return (\n    <React.Fragment>\n      {post && (\n        <>\n          <Post {...post} is_me={post.user_info?.user_id === user_info?.uid} />\n          {post.user_info.user_id === user_info?.uid ? '' : null}\n        </>\n      )}\n      <Permit>\n        <CommentWrite post_id={id} />\n      </Permit>\n\n      <CommentList post_id={id} />\n    </React.Fragment>\n  )\n}\n\nexport default PostDetail\n"]},"metadata":{},"sourceType":"module"}