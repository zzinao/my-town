{"ast":null,"code":"import React,{useRef}from'react';import{Button}from'../elements/index';import{getStorage,ref,uploadBytes,getDownloadURL}from'firebase/storage';import{useSelector,useDispatch}from'react-redux';import{actionCreators as imageActions}from'../redux/modules/image';import{jsx as _jsx}from\"react/jsx-runtime\";var Upload=function Upload(props){var fileInput=React.useRef();var is_uploading=useSelector(function(state){return state.image.uploading;});var dispatch=useDispatch();var selectFile=function selectFile(e){console.log(e.target.files);var reader=new FileReader();var file=fileInput.current.files[0];// ㅍㅏ일 내용 읽기\nreader.readAsDataURL(file);// 읽기가 끝나면 발생하는 이벤트 핸들러 ~\nreader.onloadend=function(){// console.log(reader.result)\ndispatch(imageActions.setPreview(reader.result));};};// const uploadFB = () => {\n//   if (!fileInput.current || fileInput.current.files.length === 0) {\n//     window.alert('파일을 선택해주세용')\n//     return\n//   }\n//   dispatch(imageActions.uploadImageFB(fileInput.current.files[0]))\n// const file = fileInput.current.files[0]\n// const storage = getStorage()\n// let image = fileInput.current.files[0]\n// const _upload = ref(storage, `images/${image.name}`)\n// uploadBytes(_upload, file).then((snapshot) => {\n//   console.log('Uploaded...!')\n//   //url 링크 얻기\n//   getDownloadURL(_upload).then((url) => {\n//     console.log(url)\n//   })\n// })\n// }\nreturn/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(\"input\",{type:\"file\",onChange:selectFile,ref:fileInput,disabled:is_uploading})});};export default Upload;","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/shared/Upload.js"],"names":["React","useRef","Button","getStorage","ref","uploadBytes","getDownloadURL","useSelector","useDispatch","actionCreators","imageActions","Upload","props","fileInput","is_uploading","state","image","uploading","dispatch","selectFile","e","console","log","target","files","reader","FileReader","file","current","readAsDataURL","onloadend","setPreview","result"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,MAAhB,KAA8B,OAA9B,CACA,OAASC,MAAT,KAAuB,mBAAvB,CACA,OAASC,UAAT,CAAqBC,GAArB,CAA0BC,WAA1B,CAAuCC,cAAvC,KAA6D,kBAA7D,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,cAAc,GAAIC,CAAAA,YAA3B,KAA+C,wBAA/C,C,2CAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,KAAD,CAAW,CACxB,GAAMC,CAAAA,SAAS,CAAGb,KAAK,CAACC,MAAN,EAAlB,CACA,GAAMa,CAAAA,YAAY,CAAGP,WAAW,CAAC,SAACQ,KAAD,QAAWA,CAAAA,KAAK,CAACC,KAAN,CAAYC,SAAvB,EAAD,CAAhC,CACA,GAAMC,CAAAA,QAAQ,CAAGV,WAAW,EAA5B,CAEA,GAAMW,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,CAAD,CAAO,CACxBC,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,KAArB,EACA,GAAMC,CAAAA,MAAM,CAAG,GAAIC,CAAAA,UAAJ,EAAf,CACA,GAAMC,CAAAA,IAAI,CAAGd,SAAS,CAACe,OAAV,CAAkBJ,KAAlB,CAAwB,CAAxB,CAAb,CACA;AACAC,MAAM,CAACI,aAAP,CAAqBF,IAArB,EACA;AACAF,MAAM,CAACK,SAAP,CAAmB,UAAM,CACvB;AACAZ,QAAQ,CAACR,YAAY,CAACqB,UAAb,CAAwBN,MAAM,CAACO,MAA/B,CAAD,CAAR,CACD,CAHD,CAID,CAXD,CAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACE,KAAC,KAAD,CAAO,QAAP,wBACE,cACE,IAAI,CAAC,MADP,CAEE,QAAQ,CAAEb,UAFZ,CAGE,GAAG,CAAEN,SAHP,CAIE,QAAQ,CAAEC,YAJZ,EADF,EADF,CAUD,CAjDD,CAmDA,cAAeH,CAAAA,MAAf","sourcesContent":["import React, { useRef } from 'react'\nimport { Button } from '../elements/index'\nimport { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { actionCreators as imageActions } from '../redux/modules/image'\n\nconst Upload = (props) => {\n  const fileInput = React.useRef()\n  const is_uploading = useSelector((state) => state.image.uploading)\n  const dispatch = useDispatch()\n\n  const selectFile = (e) => {\n    console.log(e.target.files)\n    const reader = new FileReader()\n    const file = fileInput.current.files[0]\n    // ㅍㅏ일 내용 읽기\n    reader.readAsDataURL(file)\n    // 읽기가 끝나면 발생하는 이벤트 핸들러 ~\n    reader.onloadend = () => {\n      // console.log(reader.result)\n      dispatch(imageActions.setPreview(reader.result))\n    }\n  }\n  // const uploadFB = () => {\n  //   if (!fileInput.current || fileInput.current.files.length === 0) {\n  //     window.alert('파일을 선택해주세용')\n  //     return\n  //   }\n  //   dispatch(imageActions.uploadImageFB(fileInput.current.files[0]))\n\n  // const file = fileInput.current.files[0]\n  // const storage = getStorage()\n  // let image = fileInput.current.files[0]\n  // const _upload = ref(storage, `images/${image.name}`)\n\n  // uploadBytes(_upload, file).then((snapshot) => {\n  //   console.log('Uploaded...!')\n\n  //   //url 링크 얻기\n  //   getDownloadURL(_upload).then((url) => {\n  //     console.log(url)\n  //   })\n  // })\n  // }\n\n  return (\n    <React.Fragment>\n      <input\n        type=\"file\"\n        onChange={selectFile}\n        ref={fileInput}\n        disabled={is_uploading}\n      />\n    </React.Fragment>\n  )\n}\n\nexport default Upload\n"]},"metadata":{},"sourceType":"module"}