{"ast":null,"code":"import { createAction, handleActions } from 'redux-actions';\nimport { produce } from 'immer';\nimport { doc, docs, getDoc, addDoc, getDocs, collection, query, orderBy, limit, updateDoc, startAt } from 'firebase/firestore';\nimport { db } from '../../shared/firebase';\nimport moment from 'moment';\nimport { getStorage, ref, uploadString, getDownloadURL } from 'firebase/storage';\nimport { actionCreators as imageActions } from './image';\nimport { add } from 'lodash';\nconst SET_POST = 'SET_POST';\nconst ADD_POST = 'ADD_POST';\nconst EDIT_POST = 'EDIT_POST';\nconst LOADING = 'LOADING'; // export function loadPost(post) {\n//   return { type: SET_POST, post }\n// }\n\nconst setPost = createAction(SET_POST, post_list => ({\n  post_list\n}));\nconst addPost = createAction(ADD_POST, post => ({\n  post\n}));\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post\n}));\nconst loading = createAction(LOADING, is_loading => ({\n  is_loading\n}));\nconst initialState = {\n  list: [],\n  paging: {\n    start: null,\n    next: null,\n    size: 3\n  },\n  is_loading: false\n};\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: 'mark',\n  //   user_profile:\n  //     'https://i.pinimg.com/564x/06/8c/4c/068c4c352f5ec31f676f9368f26143ec.jpg',\n  // },\n  image_url: 'https://i.pinimg.com/564x/06/8c/4c/068c4c352f5ec31f676f9368f26143ec.jpg',\n  contents: '',\n  comment_cnt: 0,\n  insert_dt: moment().format('YYYY-MM-dd hh:mm:ss')\n}; //스토어 연결\n\nconst addPostFB = function () {\n  let contents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return async function (dispatch, getState, _ref) {\n    let {\n      history\n    } = _ref;\n    const _user = getState().user.user;\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile\n    };\n    const _post = { ...initialPost,\n      contents: contents,\n      insert_dt: moment().format('YYYY-MM-dd')\n    };\n    const _image = getState().image.preview;\n    const storage = getStorage();\n    const storageRef = ref(storage, `images/${user_info.user_id}_${new Date().getTime()}`);\n    uploadString(storageRef, _image, 'data_url').then(snapshot => {\n      getDownloadURL(snapshot.ref).then(async url => {\n        await addDoc(collection(db, 'post'), { ...user_info,\n          ..._post,\n          image_url: url\n        });\n        let post = {\n          user_info,\n          ..._post,\n          id: doc.id,\n          image_url: url\n        };\n        dispatch(addPost(post));\n        history.replace('/');\n        dispatch(imageActions.setPreview(null));\n      }).catch(err => {\n        window.alert('post 작성에 실패했다릐,,');\n        console.log('post 작성에 실패했다릐,,', err);\n      });\n    }).catch(err => {\n      window.alert('앗! 이미지 업로드에 문제가 있다료');\n      console.log('앗! 이미지 업로드에 문제가 있다료', err);\n    });\n  };\n};\n\nexport const getPostFB = function () {\n  let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  return async function (dispatch) {\n    dispatch(loading(true));\n    const post_data = await getDocs(collection(db, 'post'));\n    const postRef = collection(db, 'post'); // 시간 순 정렬 (왜 안돼,,,)\n\n    const q = start ? query(postRef, orderBy('insert_dt', 'desc'), startAt(start), limit(size + 1)) : query(postRef, orderBy('insert_dt', 'desc'), limit(2));\n    const post = await getDocs(q);\n    let post_list = [];\n    let paging = {\n      start: post.docs[0],\n      next: post.docs.length === size + 1 ? post.docs[post.docs.length - 1] : null,\n      size: size\n    };\n    post_data.forEach(doc => {\n      let _post = {\n        id: doc.id,\n        ...doc.data()\n      }; // console.log(_post)\n\n      let post = Object.keys(_post).reduce((acc, cur) => {\n        if (cur.indexOf('user_') !== -1) {\n          return { ...acc,\n            user_info: { ...acc.user_info,\n              [cur]: _post[cur]\n            }\n          };\n        }\n\n        return { ...acc,\n          [cur]: _post[cur]\n        };\n      }, {\n        id: doc.id,\n        user_info: {}\n      }); // let post = {\n      //   id: doc.id,\n      //   user_info: {\n      //     user_name: _post.user_name,\n      //     user_profile: _post.user_profile,\n      //     user_id: _post.user_id,\n      //   },\n      //   contents: _post.contents,\n      //   image_url: _post.image_url,\n      //   comment_cnt: _post.comment_cnt,\n      //   insert_dt: _post.inser_dt,\n      // }\n\n      post_list.push(post);\n    });\n    dispatch(setPost(post_list, paging)); // console.log(post_list)\n    // })\n  };\n}; // export default function reducer(state = initialState, action = {}) {\n//   // state = {} : 디폴트값\n//   switch (action.type) {\n//     case 'SET_POST': {\n//       console.log(action.post)\n//       return {\n//         list: action.post,\n//       }\n//     }\n//     default:\n//       return state\n//   }\n// }\n//수정\n\nconst editPostFB = function () {\n  let post_id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let post = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return async function (dispatch, getState, _ref2) {\n    let {\n      history\n    } = _ref2;\n    // if (!post_id) {\n    //   console.log('게시물 정보가 없어요!')\n    //   return\n    // }\n    const _image = getState().image.preview;\n    const storage = getStorage();\n    const post_idx = getState().post.list.findIndex(p => p.id === post_id);\n    const _post = getState().post.list[post_idx]; // const uid = getState().user.user.user_id\n    // console.log(uid)\n\n    const postDB = collection(db, 'post');\n    console.log(postDB);\n\n    if (_image === _post.image_url) {\n      await updateDoc(postDB, post).then(doc => {\n        dispatch(editPost(post_id, { ...post\n        }));\n        history.replace('/');\n        dispatch(imageActions.setPreview(null));\n      });\n    } else {\n      const _user = getState().user.user;\n      const storageRef = ref(storage, `images/${_user.uid}_${new Date().getTime()}`);\n      uploadString(storageRef, _image, 'data_url').then(snapshot => {\n        getDownloadURL(snapshot.ref).then(url => {\n          dispatch(imageActions.uploadImage(url));\n          console.log(url);\n          return url;\n        }).then(async url => {\n          try {\n            await updateDoc(postDB, {\n              post\n            }).then(doc => {\n              dispatch(editPost(post_id, { ...post,\n                image_url: url\n              }));\n              history.replace('/');\n              dispatch(imageActions.setPreview(null));\n            });\n          } catch (err) {\n            window.alert('앗! 이미지 업로드에 문제가 있어요!');\n            console.log('앗! 이미지 업로드에 문제가 있어요!', err);\n          }\n        });\n      });\n    }\n\n    console.log(_post);\n  };\n};\n\nconst getOnePostFB = id => {\n  return async function (dispatch, getState, _ref3) {\n    let {\n      history\n    } = _ref3;\n    const postDB = await getDocs(collection(db, 'post'));\n    postDB.forEach(doc => {\n      let _post = doc.data();\n\n      if (!_post) {\n        return;\n      }\n\n      let post = Object.keys(_post).reduce((acc, cur) => {\n        if (cur.indexOf('user_') !== -1) {\n          return { ...acc,\n            user_info: { ...acc.user_info,\n              [cur]: _post[cur]\n            }\n          };\n        }\n\n        return { ...acc,\n          [cur]: _post[cur]\n        };\n      }, {\n        id: _post.id,\n        user_info: {}\n      });\n      dispatch(setPost([post]));\n    });\n  };\n};\n\nexport default handleActions({\n  [SET_POST]: (state, action) => produce(state, draft => {\n    draft.list.push(...action.payload.post_list);\n    draft.ist = draft.list.reduce((acc, cur) => {\n      if (acc.findIndex(a => a.id === cur.id) === -1) {\n        return [...acc, cur];\n      } else {\n        acc[acc.findIndex(a => a.id === cur.id)] = cur;\n        return acc;\n      }\n    }, []);\n\n    if (action.payload.paging) {\n      draft.paging = action.payload.paging;\n    }\n\n    draft.is_loading = false;\n  }),\n  [ADD_POST]: (state, action) => produce(state, draft => {\n    draft.list.unshift(action.payload.post);\n  }),\n  [EDIT_POST]: (state, action) => produce(state, draft => {\n    let idx = draft.list.findIndex(p => p.id = action.payload.post);\n    draft.list[idx] = { ...draft.list[idx],\n      ...action.payload.post\n    };\n  }),\n  [LOADING]: (state, action) => produce(state, draft => {\n    draft.is_loading = action.payload.is_loading;\n  })\n}, initialState);\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n  getOnePostFB\n};\nexport { actionCreators };","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/redux/modules/post.js"],"names":["createAction","handleActions","produce","doc","docs","getDoc","addDoc","getDocs","collection","query","orderBy","limit","updateDoc","startAt","db","moment","getStorage","ref","uploadString","getDownloadURL","actionCreators","imageActions","add","SET_POST","ADD_POST","EDIT_POST","LOADING","setPost","post_list","addPost","post","editPost","post_id","loading","is_loading","initialState","list","paging","start","next","size","initialPost","image_url","contents","comment_cnt","insert_dt","format","addPostFB","dispatch","getState","history","_user","user","user_info","user_name","user_id","uid","user_profile","_post","_image","image","preview","storage","storageRef","Date","getTime","then","snapshot","url","id","replace","setPreview","catch","err","window","alert","console","log","getPostFB","post_data","postRef","q","length","forEach","data","Object","keys","reduce","acc","cur","indexOf","push","editPostFB","post_idx","findIndex","p","postDB","uploadImage","getOnePostFB","state","action","draft","payload","ist","a","unshift","idx"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions'\nimport { produce } from 'immer'\nimport {\n  doc,\n  docs,\n  getDoc,\n  addDoc,\n  getDocs,\n  collection,\n  query,\n  orderBy,\n  limit,\n  updateDoc,\n  startAt,\n} from 'firebase/firestore'\nimport { db } from '../../shared/firebase'\nimport moment from 'moment'\nimport { getStorage, ref, uploadString, getDownloadURL } from 'firebase/storage'\nimport { actionCreators as imageActions } from './image'\nimport { add } from 'lodash'\n\nconst SET_POST = 'SET_POST'\nconst ADD_POST = 'ADD_POST'\nconst EDIT_POST = 'EDIT_POST'\nconst LOADING = 'LOADING'\n\n// export function loadPost(post) {\n//   return { type: SET_POST, post }\n// }\n\nconst setPost = createAction(SET_POST, (post_list) => ({ post_list }))\nconst addPost = createAction(ADD_POST, (post) => ({ post }))\nconst editPost = createAction(EDIT_POST, (post_id, post) => ({\n  post_id,\n  post,\n}))\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }))\n\nconst initialState = {\n  list: [],\n  paging: { start: null, next: null, size: 3 },\n  is_loading: false,\n}\n\nconst initialPost = {\n  // id: 0,\n  // user_info: {\n  //   user_name: 'mark',\n  //   user_profile:\n  //     'https://i.pinimg.com/564x/06/8c/4c/068c4c352f5ec31f676f9368f26143ec.jpg',\n  // },\n  image_url:\n    'https://i.pinimg.com/564x/06/8c/4c/068c4c352f5ec31f676f9368f26143ec.jpg',\n  contents: '',\n  comment_cnt: 0,\n  insert_dt: moment().format('YYYY-MM-dd hh:mm:ss'),\n}\n\n//스토어 연결\nconst addPostFB = (contents = '') => {\n  return async function (dispatch, getState, { history }) {\n    const _user = getState().user.user\n    const user_info = {\n      user_name: _user.user_name,\n      user_id: _user.uid,\n      user_profile: _user.user_profile,\n    }\n    const _post = {\n      ...initialPost,\n      contents: contents,\n      insert_dt: moment().format('YYYY-MM-dd'),\n    }\n\n    const _image = getState().image.preview\n\n    const storage = getStorage()\n    const storageRef = ref(\n      storage,\n      `images/${user_info.user_id}_${new Date().getTime()}`,\n    )\n\n    uploadString(storageRef, _image, 'data_url')\n      .then((snapshot) => {\n        getDownloadURL(snapshot.ref)\n          .then(async (url) => {\n            await addDoc(collection(db, 'post'), {\n              ...user_info,\n              ..._post,\n              image_url: url,\n            })\n            let post = { user_info, ..._post, id: doc.id, image_url: url }\n            dispatch(addPost(post))\n            history.replace('/')\n\n            dispatch(imageActions.setPreview(null))\n          })\n          .catch((err) => {\n            window.alert('post 작성에 실패했다릐,,')\n            console.log('post 작성에 실패했다릐,,', err)\n          })\n      })\n      .catch((err) => {\n        window.alert('앗! 이미지 업로드에 문제가 있다료')\n        console.log('앗! 이미지 업로드에 문제가 있다료', err)\n      })\n  }\n}\n\nexport const getPostFB = (start = null, size = 3) => {\n  return async function (dispatch) {\n    dispatch(loading(true))\n    const post_data = await getDocs(collection(db, 'post'))\n    const postRef = collection(db, 'post')\n    // 시간 순 정렬 (왜 안돼,,,)\n    const q = start\n      ? query(\n          postRef,\n          orderBy('insert_dt', 'desc'),\n          startAt(start),\n          limit(size + 1),\n        )\n      : query(postRef, orderBy('insert_dt', 'desc'), limit(2))\n    const post = await getDocs(q)\n    let post_list = []\n    let paging = {\n      start: post.docs[0],\n      next:\n        post.docs.length === size + 1 ? post.docs[post.docs.length - 1] : null,\n      size: size,\n    }\n    post_data.forEach((doc) => {\n      let _post = { id: doc.id, ...doc.data() }\n      // console.log(_post)\n      let post = Object.keys(_post).reduce(\n        (acc, cur) => {\n          if (cur.indexOf('user_') !== -1) {\n            return {\n              ...acc,\n              user_info: { ...acc.user_info, [cur]: _post[cur] },\n            }\n          }\n          return { ...acc, [cur]: _post[cur] }\n        },\n        { id: doc.id, user_info: {} },\n      )\n      // let post = {\n      //   id: doc.id,\n      //   user_info: {\n      //     user_name: _post.user_name,\n      //     user_profile: _post.user_profile,\n      //     user_id: _post.user_id,\n      //   },\n      //   contents: _post.contents,\n      //   image_url: _post.image_url,\n      //   comment_cnt: _post.comment_cnt,\n      //   insert_dt: _post.inser_dt,\n      // }\n      post_list.push(post)\n    })\n    dispatch(setPost(post_list, paging))\n    // console.log(post_list)\n    // })\n  }\n}\n// export default function reducer(state = initialState, action = {}) {\n//   // state = {} : 디폴트값\n//   switch (action.type) {\n//     case 'SET_POST': {\n//       console.log(action.post)\n//       return {\n//         list: action.post,\n//       }\n//     }\n\n//     default:\n//       return state\n//   }\n// }\n\n//수정\nconst editPostFB = (post_id = null, post = {}) => {\n  return async function (dispatch, getState, { history }) {\n    // if (!post_id) {\n    //   console.log('게시물 정보가 없어요!')\n    //   return\n    // }\n    const _image = getState().image.preview\n    const storage = getStorage()\n    const post_idx = getState().post.list.findIndex((p) => p.id === post_id)\n    const _post = getState().post.list[post_idx]\n\n    // const uid = getState().user.user.user_id\n    // console.log(uid)\n    const postDB = collection(db, 'post')\n    console.log(postDB)\n\n    if (_image === _post.image_url) {\n      await updateDoc(postDB, post).then((doc) => {\n        dispatch(editPost(post_id, { ...post }))\n        history.replace('/')\n        dispatch(imageActions.setPreview(null))\n      })\n    } else {\n      const _user = getState().user.user\n      const storageRef = ref(\n        storage,\n        `images/${_user.uid}_${new Date().getTime()}`,\n      )\n      uploadString(storageRef, _image, 'data_url').then((snapshot) => {\n        getDownloadURL(snapshot.ref)\n          .then((url) => {\n            dispatch(imageActions.uploadImage(url))\n            console.log(url)\n            return url\n          })\n          .then(async (url) => {\n            try {\n              await updateDoc(postDB, { post }).then((doc) => {\n                dispatch(editPost(post_id, { ...post, image_url: url }))\n                history.replace('/')\n                dispatch(imageActions.setPreview(null))\n              })\n            } catch (err) {\n              window.alert('앗! 이미지 업로드에 문제가 있어요!')\n              console.log('앗! 이미지 업로드에 문제가 있어요!', err)\n            }\n          })\n      })\n    }\n\n    console.log(_post)\n  }\n}\n\nconst getOnePostFB = (id) => {\n  return async function (dispatch, getState, { history }) {\n    const postDB = await getDocs(collection(db, 'post'))\n    postDB.forEach((doc) => {\n      let _post = doc.data()\n      if (!_post) {\n        return\n      }\n      let post = Object.keys(_post).reduce(\n        (acc, cur) => {\n          if (cur.indexOf('user_') !== -1) {\n            return {\n              ...acc,\n              user_info: { ...acc.user_info, [cur]: _post[cur] },\n            }\n          }\n          return { ...acc, [cur]: _post[cur] }\n        },\n        { id: _post.id, user_info: {} },\n      )\n      dispatch(setPost([post]))\n    })\n  }\n}\n\nexport default handleActions(\n  {\n    [SET_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.push(...action.payload.post_list)\n\n        draft.ist = draft.list.reduce((acc, cur) => {\n          if (acc.findIndex((a) => a.id === cur.id) === -1) {\n            return [...acc, cur]\n          } else {\n            acc[acc.findIndex((a) => a.id === cur.id)] = cur\n            return acc\n          }\n        }, [])\n        if (action.payload.paging) {\n          draft.paging = action.payload.paging\n        }\n\n        draft.is_loading = false\n      }),\n\n    [ADD_POST]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list.unshift(action.payload.post)\n      }),\n    [EDIT_POST]: (state, action) =>\n      produce(state, (draft) => {\n        let idx = draft.list.findIndex((p) => (p.id = action.payload.post))\n        draft.list[idx] = { ...draft.list[idx], ...action.payload.post }\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading\n      }),\n  },\n  initialState,\n)\n\nconst actionCreators = {\n  setPost,\n  addPost,\n  getPostFB,\n  addPostFB,\n  editPostFB,\n  getOnePostFB,\n}\n\nexport { actionCreators }\n"]},"metadata":{},"sourceType":"module"}