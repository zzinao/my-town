{"ast":null,"code":"import _defineProperty from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _asyncToGenerator from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";var _handleActions;import _regeneratorRuntime from\"/Users/jina/Desktop/\\u1112\\u1161\\u11BC\\u1112\\u116299/sparta-react02/community/my_town-/node_modules/@babel/runtime/regenerator/index.js\";import{createAction,handleActions}from'redux-actions';import{produce}from'immer';import{realtime}from'../../shared/firebase';import firebase from'firebase/compat/app';import{getDocs,doc,addDoc,collection,query,where,orderBy,updateDoc,increment}from'firebase/firestore';import{db}from'../../shared/firebase';import{actionCreators as postActions}from'./post';import{ref,update,push}from'firebase/database';import moment from'moment';var SET_COMMENT='SET_COMMENT';var ADD_COMMENT='ADD_COMMENT';var LOADING='LOADING';var setComment=createAction(SET_COMMENT,function(post_id,comment_list){return{post_id:post_id,comment_list:comment_list};});var addComment=createAction(ADD_COMMENT,function(post_id,comment){return{post_id:post_id,comment:comment};});var loading=createAction(LOADING,function(is_loading){return{is_loading:is_loading};});var initialState={list:{},is_loading:false};var addCommentFB=function addCommentFB(post_id,contents){return/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch,getState,_ref){var history,user_info,postDB,post,comment;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:history=_ref.history;// const commentDB = collection(db, 'comment')\nuser_info=getState().user.user;postDB=collection(db,'comment');post=getState().post.list.find(function(l){return l.id===post_id;});comment={post_id:post_id,user_id:user_info.uid,user_name:user_info.user_name,user_profile:user_info.user_profile,contents:contents,insert_dt:moment().format('YYYY-MM-DD hh:mm')};_context3.next=7;return addDoc(postDB,comment).then(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(i){var post;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:post=getState().post.list.find(function(l){return l.id===post_id;});comment=_objectSpread(_objectSpread({},comment),{},{id:i.id});//   const increment = firebase.firestore.FieldValue.increment(1){ comment_cnt: increment }\n//   comment = { ...comment, id: doc.id }\n_context2.next=4;return updateDoc(doc(db,'post',post_id),{comment_cnt:increment(1)}).then(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_post){var _noti_item;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:dispatch(addComment(post_id,comment));if(!post){_context.next=6;break;}dispatch(postActions.editPost(post_id,{comment_cnt:parseInt(post.comment_cnt)+1}));_noti_item=ref(realtime,\"noti/\".concat(post.user_info.user_id,\"/list\"));_context.next=6;return push(_noti_item,{post_id:post_id,user_name:comment.user_name,image_url:post.image_url,insert_dt:comment.insert_dt}).then(function(i){var notiDB=ref(realtime,\"noti/\".concat(post.user_info.user_id));update(notiDB,{read:false});});case 6:case\"end\":return _context.stop();}}},_callee);}));return function(_x5){return _ref4.apply(this,arguments);};}());case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x4){return _ref3.apply(this,arguments);};}());case 7:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x,_x2,_x3){return _ref2.apply(this,arguments);};}();};var getCommentFB=function getCommentFB(){var post_id=arguments.length>0&&arguments[0]!==undefined?arguments[0]:null;return/*#__PURE__*/function(){var _ref6=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch,getState,_ref5){var history,commentDB,list,q;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:history=_ref5.history;if(post_id){_context4.next=3;break;}return _context4.abrupt(\"return\");case 3:commentDB=collection(db,'comment');console.log(commentDB);list=[];q=query(commentDB,where('post_id','==',post_id),orderBy('insert_dt','desc'));_context4.next=9;return getDocs(q).then(function(docs){docs.forEach(function(doc){console.log(doc.data());list.push(_objectSpread(_objectSpread({},doc.data()),{},{id:doc.id}));});console.log(list);dispatch(setComment(post_id,list));}).catch(function(err){console.log('댓글 정보를 가져올 수가 ....',err);});case 9:case\"end\":return _context4.stop();}}},_callee4);}));return function(_x6,_x7,_x8){return _ref6.apply(this,arguments);};}();};export default handleActions((_handleActions={},_defineProperty(_handleActions,SET_COMMENT,function(state,action){return produce(state,function(draft){//let date ={[post_id]: com_list...}\ndraft.list[action.payload.post_id]=action.payload.comment_list;});}),_defineProperty(_handleActions,ADD_COMMENT,function(state,action){return produce(state,function(draft){draft.list[action.payload.post_id].unshift(action.payload.comment);});}),_defineProperty(_handleActions,LOADING,function(state,action){return produce(state,function(draft){draft.is_loading=action.payload.is_loading;});}),_handleActions),initialState);var actionCreators={getCommentFB:getCommentFB,setComment:setComment,addComment:addComment,addCommentFB:addCommentFB};export{actionCreators};","map":{"version":3,"sources":["/Users/jina/Desktop/항해99/sparta-react02/community/my_town-/src/redux/modules/comments.js"],"names":["createAction","handleActions","produce","realtime","firebase","getDocs","doc","addDoc","collection","query","where","orderBy","updateDoc","increment","db","actionCreators","postActions","ref","update","push","moment","SET_COMMENT","ADD_COMMENT","LOADING","setComment","post_id","comment_list","addComment","comment","loading","is_loading","initialState","list","addCommentFB","contents","dispatch","getState","history","user_info","user","postDB","post","find","l","id","user_id","uid","user_name","user_profile","insert_dt","format","then","i","comment_cnt","_post","editPost","parseInt","_noti_item","image_url","notiDB","read","getCommentFB","commentDB","console","log","q","docs","forEach","data","catch","err","state","action","draft","payload","unshift"],"mappings":"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","sourcesContent":["import { createAction, handleActions } from 'redux-actions'\nimport { produce } from 'immer'\nimport { realtime } from '../../shared/firebase'\nimport firebase from 'firebase/compat/app'\nimport {\n  getDocs,\n  doc,\n  addDoc,\n  collection,\n  query,\n  where,\n  orderBy,\n  updateDoc,\n  increment,\n} from 'firebase/firestore'\nimport { db } from '../../shared/firebase'\nimport { actionCreators as postActions } from './post'\nimport { ref, update, push } from 'firebase/database'\nimport moment from 'moment'\n\nconst SET_COMMENT = 'SET_COMMENT'\nconst ADD_COMMENT = 'ADD_COMMENT'\n\nconst LOADING = 'LOADING'\n\nconst setComment = createAction(SET_COMMENT, (post_id, comment_list) => ({\n  post_id,\n  comment_list,\n}))\nconst addComment = createAction(ADD_COMMENT, (post_id, comment) => ({\n  post_id,\n  comment,\n}))\n\nconst loading = createAction(LOADING, (is_loading) => ({ is_loading }))\n\nconst initialState = {\n  list: {},\n  is_loading: false,\n}\n\nconst addCommentFB = (post_id, contents) => {\n  return async function (dispatch, getState, { history }) {\n    // const commentDB = collection(db, 'comment')\n    const user_info = getState().user.user\n    const postDB = collection(db, 'comment')\n    const post = getState().post.list.find((l) => l.id === post_id)\n\n    let comment = {\n      post_id: post_id,\n      user_id: user_info.uid,\n      user_name: user_info.user_name,\n      user_profile: user_info.user_profile,\n      contents: contents,\n      insert_dt: moment().format('YYYY-MM-DD hh:mm'),\n    }\n\n    await addDoc(postDB, comment).then(async (i) => {\n      const post = getState().post.list.find((l) => l.id === post_id)\n      comment = { ...comment, id: i.id }\n      //   const increment = firebase.firestore.FieldValue.increment(1){ comment_cnt: increment }\n      //   comment = { ...comment, id: doc.id }\n\n      await updateDoc(doc(db, 'post', post_id), {\n        comment_cnt: increment(1),\n      }).then(async (_post) => {\n        dispatch(addComment(post_id, comment))\n\n        if (post) {\n          dispatch(\n            postActions.editPost(post_id, {\n              comment_cnt: parseInt(post.comment_cnt) + 1,\n            }),\n          )\n          const _noti_item = ref(\n            realtime,\n            `noti/${post.user_info.user_id}/list`,\n          )\n          await push(_noti_item, {\n            post_id: post_id,\n            user_name: comment.user_name,\n            image_url: post.image_url,\n            insert_dt: comment.insert_dt,\n          }).then((i) => {\n            const notiDB = ref(realtime, `noti/${post.user_info.user_id}`)\n            update(notiDB, { read: false })\n          })\n        }\n      })\n    })\n  }\n}\n\nconst getCommentFB = (post_id = null) => {\n  return async function (dispatch, getState, { history }) {\n    if (!post_id) {\n      return\n    }\n    const commentDB = collection(db, 'comment')\n    console.log(commentDB)\n    let list = []\n    const q = query(\n      commentDB,\n      where('post_id', '==', post_id),\n      orderBy('insert_dt', 'desc'),\n    )\n    await getDocs(q)\n      .then((docs) => {\n        docs.forEach((doc) => {\n          console.log(doc.data())\n          list.push({ ...doc.data(), id: doc.id })\n        })\n        console.log(list)\n        dispatch(setComment(post_id, list))\n      })\n\n      .catch((err) => {\n        console.log('댓글 정보를 가져올 수가 ....', err)\n      })\n  }\n}\n\nexport default handleActions(\n  {\n    [SET_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        //let date ={[post_id]: com_list...}\n        draft.list[action.payload.post_id] = action.payload.comment_list\n      }),\n    [ADD_COMMENT]: (state, action) =>\n      produce(state, (draft) => {\n        draft.list[action.payload.post_id].unshift(action.payload.comment)\n      }),\n    [LOADING]: (state, action) =>\n      produce(state, (draft) => {\n        draft.is_loading = action.payload.is_loading\n      }),\n  },\n  initialState,\n)\n\nconst actionCreators = {\n  getCommentFB,\n  setComment,\n  addComment,\n  addCommentFB,\n}\n\nexport { actionCreators }\n"]},"metadata":{},"sourceType":"module"}